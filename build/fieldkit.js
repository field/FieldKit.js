;(function(e,t,n,r){function i(r){if(!n[r]){if(!t[r]){if(e)return e(r);throw new Error("Cannot find module '"+r+"'")}var s=n[r]={exports:{}};t[r][0](function(e){var n=t[r][1][e];return i(n?n:e)},s,s.exports)}return n[r].exports}for(var s=0;s<r.length;s++)i(r[s]);return i})(typeof require!=="undefined"&&require,{1:[function(require,module,exports){(function(global){// Generated by CoffeeScript 1.6.1

/*
      _____  __  _____  __     ____
     / ___/ / / /____/ / /    /    \   FieldKit
    / ___/ /_/ /____/ / /__  /  /  /   (c) 2013, FIELD. All rights reserved.
   /_/        /____/ /____/ /_____/    http://www.field.io

   Created by Marcus Wendt on 07/03/2013
*/


(function() {
  var extend, fk, util;

  util = require('./util');

  extend = function() {
    var pkg;
    switch (arguments.length) {
      case 1:
        return util.extend(fk, arguments[0]);
      case 2:
        pkg = arguments[0];
        if (fk[pkg] == null) {
          fk[pkg] = {};
        }
        return util.extend(fk[pkg], arguments[1]);
    }
  };

  fk = {};

  extend(require('./color'));

  extend(require('./time'));

  extend('math', require('./math/math'));

  extend('math', require('./math/random'));

  extend('math', require('./math/vector'));

  extend('util', util);

  extend('physics', require('./physics/physics'));

  extend('physics', require('./physics/particle'));

  extend('physics', require('./physics/behaviours'));

  extend('physics', require('./physics/constraints'));

  extend('client', require('./client/sketch'));

  module.exports = fk;

  global.fk = fk;

}).call(this);

})(window)
},{"./util":2,"./color":3,"./time":4,"./math/math":5,"./math/random":6,"./math/vector":7,"./physics/physics":8,"./physics/particle":9,"./physics/behaviours":10,"./physics/constraints":11,"./client/sketch":12}],2:[function(require,module,exports){// Generated by CoffeeScript 1.6.1
(function() {
  var util;

  util = {};

  util.extend = function(obj, source) {
    var i, il, keys, prop, safeHasOwnProperty;
    if (Object.keys) {
      keys = Object.keys(source);
      i = 0;
      il = keys.length;
      while (i < il) {
        prop = keys[i];
        Object.defineProperty(obj, prop, Object.getOwnPropertyDescriptor(source, prop));
        i++;
      }
    } else {
      safeHasOwnProperty = {}.hasOwnProperty;
      for (prop in source) {
        if (safeHasOwnProperty.call(source, prop)) {
          obj[prop] = source[prop];
        }
      }
    }
    return obj;
  };

  util.removeElement = function(element, list) {
    var index;
    index = list.indexOf(element);
    if (index !== -1) {
      list.splice(index, 1);
    }
    return list;
  };

  module.exports = util;

}).call(this);

},{}],3:[function(require,module,exports){// Generated by CoffeeScript 1.6.1
(function() {
  var Color;

  Color = (function() {

    function Color(r, g, b, a) {
      this.r = r != null ? r : 0;
      this.g = g != null ? g : 0;
      this.b = b != null ? b : 0;
      this.a = a != null ? a : 256;
    }

    Color.prototype.set = function(color) {
      this.r = color.r;
      this.g = color.g;
      return this.b = color.b;
    };

    Color.prototype.randomize = function() {
      this.r = Math.floor(Math.random() * 256);
      this.g = Math.floor(Math.random() * 256);
      return this.b = Math.floor(Math.random() * 256);
    };

    Color.prototype.clone = function() {
      return new Color(this.r, this.g, this.b, this.a);
    };

    Color.prototype.equals = function(other) {
      if (other == null) {
        return false;
      }
      return this.r === other.r && this.g === other.g && this.b === other.b && this.a === other.a;
    };

    Color.prototype.toString = function() {
      return "fk.Color(" + this.r + "," + this.g + "," + this.b + "," + this.a + ")";
    };

    return Color;

  })();

  module.exports = {
    Color: Color
  };

}).call(this);

},{}],4:[function(require,module,exports){// Generated by CoffeeScript 1.6.1
(function() {
  var Tempo, Timer;

  Timer = (function() {

    Timer.prototype.now = null;

    Timer.prototype.prev = null;

    function Timer() {
      this.reset();
    }

    Timer.prototype.update = function() {
      var dt;
      this.now = Date.now();
      dt = this.now - this.prev;
      this.prev = this.now;
      return dt;
    };

    Timer.prototype.elapsed = function() {
      return Date.now() - this.prev;
    };

    Timer.prototype.reset = function() {
      return this.now = this.prev = Date.now();
    };

    return Timer;

  })();

  Tempo = (function() {

    Tempo.prototype.bpm = 120;

    Tempo.prototype.sigNum = 4;

    Tempo.prototype.sigDenom = 4;

    Tempo.prototype.resolution = 32;

    Tempo.prototype.beatInterval = 0;

    Tempo.prototype.gridInterval = 0;

    Tempo.prototype.time = 0;

    Tempo.prototype.prevEvent = 0;

    Tempo.prototype.beats = 0;

    Tempo.prototype.beat = 0;

    Tempo.prototype.bar = 0;

    Tempo.prototype.onBeat = false;

    Tempo.prototype.onBar = false;

    Tempo.prototype.on64 = false;

    Tempo.prototype.on32 = false;

    Tempo.prototype.on16 = false;

    Tempo.prototype.on8 = false;

    Tempo.prototype.on4 = false;

    Tempo.prototype.on2 = false;

    function Tempo(bpm, sigNum, sigDenom) {
      this.bpm = bpm != null ? bpm : 120;
      this.sigNum = sigNum != null ? sigNum : 4;
      this.sigDenom = sigDenom != null ? sigDenom : 4;
      this.reset();
    }

    Tempo.prototype.reset = function() {
      this.beatInterval = 1000 / (this.bpm / 60);
      this.gridInterval = this.beatInterval * this.sigNum / this.resolution;
      this.time = this.prevEvent = 0;
      this.beats = 0;
      this.beat = this.bar = 0;
      this.onBeat = this.onBar = false;
      return this.on64 = this.on32 = this.on16 = this.on8 = this.on4 = this.on2 = false;
    };

    Tempo.prototype.update = function(dt) {
      var gridUnits, r, u;
      this.time += dt;
      if (this.time - this.prevEvent >= this.gridInterval) {
        this.prevEvent = this.time;
        gridUnits = Math.floor(this.time / this.gridInterval);
        u = gridUnits;
        r = this.resolution;
        this.beats = Math.floor(this.time / this.beatInterval);
        this.beat = this.beats % this.sigNum;
        this.onBeat = u % (r / this.sigNum) === 0;
        this.onBar = (u % this.sigDenom) === 0;
        if (this.onBar) {
          this.bar += 1;
        }
        this.on64 = u % (r / 64) === 0;
        this.on32 = u % (r / 32) === 0;
        this.on16 = u % (r / 16) === 0;
        this.on8 = u % (r / 8) === 0;
        this.on4 = u % (r / 4) === 0;
        this.on2 = u % (r / 2) === 0;
      } else {
        this.onBeat = this.onBar = false;
        this.on64 = this.on32 = this.on16 = this.on8 = this.on4 = this.on2 = false;
      }
      return this.beat;
    };

    return Tempo;

  })();

  module.exports = {
    Timer: Timer,
    Tempo: Tempo
  };

}).call(this);

},{}],5:[function(require,module,exports){// Generated by CoffeeScript 1.6.1
(function() {
  var math;

  math = {
    fit01: function(value, min, max) {
      return value * (max - min) + min;
    },
    rand: function(min, max, rng) {
      var r;
      r = rng != null ? rng.next() : Math.random();
      return r * (max - min) + min;
    }
  };

  module.exports = math;

}).call(this);

},{}],7:[function(require,module,exports){// Generated by CoffeeScript 1.6.1
(function() {
  var Vec2, Vec3;

  Vec2 = (function() {

    Vec2.prototype.x = 0;

    Vec2.prototype.y = 0;

    function Vec2(x, y) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
    }

    Vec2.prototype.set = function(v) {
      this.x = v.x;
      this.y = v.y;
      return this;
    };

    Vec2.prototype.set2 = function(x, y) {
      this.x = x;
      this.y = y;
      return this;
    };

    Vec2.prototype.zero = function() {
      this.x = this.y = 0;
      return this;
    };

    Vec2.prototype.add = function(v) {
      this.x += v.x;
      this.y += v.y;
      return this;
    };

    Vec2.prototype.add_ = function(v) {
      return new Vec2(this.x + v.x, this.y + v.y);
    };

    Vec2.prototype.sub = function(v) {
      this.x -= v.x;
      this.y -= v.y;
      return this;
    };

    Vec2.prototype.sub_ = function(v) {
      return new Vec2(this.x - v.x, this.y - v.y);
    };

    Vec2.prototype.mul = function(v) {
      this.x *= v.x;
      this.y *= v.y;
      return this;
    };

    Vec2.prototype.mul_ = function(v) {
      return new Vec2(this.x * v.x, this.y * v.y);
    };

    Vec2.prototype.div = function(v) {
      this.x /= v.x;
      this.y /= v.y;
      return this;
    };

    Vec2.prototype.div_ = function(v) {
      return new Vec2(this.x / v.x, this.y / v.y);
    };

    Vec2.prototype.scale = function(value) {
      this.x *= value;
      this.y *= value;
      return this;
    };

    Vec2.prototype.scale_ = function(value) {
      return new Vec2(this.x * value, this.y * value);
    };

    Vec2.prototype.length = function() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    Vec2.prototype.lengthSquared = function() {
      return this.x * this.x + this.y * this.y;
    };

    Vec2.prototype.normalize = function() {
      var l;
      l = this.length();
      if (l !== 0) {
        this.x /= l;
        this.y /= l;
      }
      return this;
    };

    Vec2.prototype.normalize_ = function() {
      return this.clone().normalize();
    };

    Vec2.prototype.normalizeTo = function(length) {
      var magnitude;
      magnitude = Math.sqrt(this.x * this.x + this.y * this.y);
      if (magnitude > 0) {
        magnitude = length / magnitude;
        this.x *= magnitude;
        this.y *= magnitude;
      }
      return this;
    };

    Vec2.prototype.normalizeTo_ = function(length) {
      return this.clone().normalizeTo_(length);
    };

    Vec2.prototype.distance = function(v) {
      return Math.sqrt(this.distanceSquared2(v.x, v.y));
    };

    Vec2.prototype.distanceSquared = function(v) {
      return this.distanceSquared2(v.x, v.y);
    };

    Vec2.prototype.distanceSquared2 = function(x, y) {
      var dx, dy;
      dx = this.x - x;
      dy = this.y - y;
      return dx * dx + dy * dy;
    };

    Vec2.prototype.dot = function(v) {
      return this.x * v.x + this.y * v.y;
    };

    Vec2.prototype.rotate = function(angle) {
      var cosa, rx, ry, sina;
      sina = Math.sin(angle);
      cosa = Math.cos(angle);
      rx = this.x * cosa - this.y * sina;
      ry = this.x * sina + this.y * cosa;
      this.x = rx;
      return this.y = ry;
    };

    Vec2.prototype.jitter = function(amount) {
      this.x += Math.random.float(-1, 1) * amount;
      this.y += Math.random.float(-1, 1) * amount;
      return this;
    };

    Vec2.prototype.jitter_ = function(amount) {
      return (new Vec2(this.x, this.y)).jitter(amount);
    };

    Vec2.prototype.lerp = function(target, delta) {
      this.x = this.x * (1 - delta) + target.x * delta;
      this.y = this.y * (1 - delta) + target.y * delta;
      return this;
    };

    Vec2.prototype.lerp_ = function(target, delta) {
      return (new Vec2(this.x, this.y)).lerp(target, delta);
    };

    Vec2.prototype.equals = function(v) {
      return this.x === v.x && this.y === v.y;
    };

    Vec2.prototype.clone = function() {
      return new Vec2(this.x, this.y);
    };

    Vec2.prototype.toString = function() {
      return "Vec2(" + this.x + ", " + this.y + ")";
    };

    return Vec2;

  })();

  Vec3 = (function() {

    Vec3.prototype.x = 0;

    Vec3.prototype.y = 0;

    Vec3.prototype.z = 0;

    function Vec3(x, y, z) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      this.z = z != null ? z : 0;
    }

    Vec3.prototype.set = function(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
    };

    Vec3.prototype.set3 = function(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
      return this;
    };

    Vec3.prototype.zero = function() {
      this.x = this.y = this.z = 0;
      return this;
    };

    Vec3.prototype.add = function(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
    };

    Vec3.prototype.add_ = function(v) {
      return new Vec3(this.x + v.x, this.y + v.y, this.z + v.z);
    };

    Vec3.prototype.sub = function(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
    };

    Vec3.prototype.sub_ = function(v) {
      return new Vec3(this.x - v.x, this.y - v.y, this.z - v.z);
    };

    Vec3.prototype.mul = function(v) {
      this.x *= v.x;
      this.y *= v.y;
      return this;
    };

    Vec3.prototype.mul_ = function(v) {
      return new Vec3(this.x * v.x, this.y * v.y, this.z * v.z);
    };

    Vec3.prototype.div = function(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      return this;
    };

    Vec3.prototype.div_ = function(v) {
      return new Vec3(this.x / v.x, this.y / v.y, this.z = v.z);
    };

    Vec3.prototype.scale = function(value) {
      this.x *= value;
      this.y *= value;
      this.z *= value;
      return this;
    };

    Vec3.prototype.scale_ = function(value) {
      return new Vec3(this.x * value, this.y * value, this.z * value);
    };

    Vec3.prototype.length = function() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    };

    Vec3.prototype.lengthSquared = function() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    };

    Vec3.prototype.normalize = function() {
      var l;
      l = this.length();
      if (l !== 0) {
        this.x /= l;
        this.y /= l;
        this.z /= l;
      }
      return this;
    };

    Vec3.prototype.normalize_ = function() {
      return this.clone().normalize();
    };

    Vec3.prototype.normalizeTo = function(length) {
      var magnitude;
      magnitude = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
      if (magnitude > 0) {
        magnitude = length / magnitude;
        this.x *= magnitude;
        this.y *= magnitude;
      }
      return this;
    };

    Vec3.prototype.normalizeTo_ = function(length) {
      return this.clone().normalizeTo_(length);
    };

    Vec3.prototype.distance = function(v) {
      return Math.sqrt(this.distanceSquared3(v.x, v.y, v.z));
    };

    Vec3.prototype.distanceSquared = function(v) {
      return this.distanceSquared3(v.x, v.y, v.z);
    };

    Vec3.prototype.distanceSquared3 = function(x, y, z) {
      var dx, dy, dz;
      dx = this.x - x;
      dy = this.y - y;
      dz = this.z - z;
      return dx * dx + dy * dy + dz * dz;
    };

    Vec3.prototype.dot = function(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    };

    Vec3.prototype.jitter = function(amount) {
      this.x += Math.random.float(-1, 1) * amount;
      this.y += Math.random.float(-1, 1) * amount;
      this.z += Math.random.float(-1, 1) * amount;
      return this;
    };

    Vec3.prototype.jitter_ = function(amount) {
      return (new Vec3(this.x, this.y, this.z)).jitter(amount);
    };

    Vec3.prototype.lerp = function(target, delta) {
      this.x = this.x * (1 - delta) + target.x * delta;
      this.y = this.y * (1 - delta) + target.y * delta;
      this.z = this.z * (1 - delta) + target.z * delta;
      return this;
    };

    Vec3.prototype.lerp_ = function(target, delta) {
      return (new Vec3(this.x, this.y, this.z)).lerp(target, delta);
    };

    Vec3.prototype.equals = function(v) {
      return this.x === v.x && this.y === v.y && this.z === v.z;
    };

    Vec3.prototype.clone = function() {
      return new Vec3(this.x, this.y, this.z);
    };

    Vec3.prototype.toString = function() {
      return "Vec3(" + this.x + ", " + this.y + ", " + this.z + ")";
    };

    return Vec3;

  })();

  module.exports = {
    Vec2: Vec2,
    Vec3: Vec3
  };

}).call(this);

},{}],12:[function(require,module,exports){// Generated by CoffeeScript 1.6.1

/*

  FIELDKIT SKETCH CLASS
*/


(function() {
  var Sketch;

  Sketch = (function() {
    var computeStyle, isFillEnabled, isStrokeEnabled;

    Sketch.prototype.width = -1;

    Sketch.prototype.height = -1;

    Sketch.prototype.domObjectId = "container";

    Sketch.prototype.g = null;

    Sketch.prototype.mouseX = 0;

    Sketch.prototype.mouseY = 0;

    function Sketch(options) {
      var canvas, domObject,
        _this = this;
      domObject = document.getElementById(this.domObjectId);
      if (this.width === -1) {
        this.width = domObject.offsetWidth;
      }
      if (this.height === -1) {
        this.height = domObject.offsetHeight;
      }
      canvas = document.createElement("canvas");
      canvas.width = this.width;
      canvas.height = this.height;
      domObject.appendChild(canvas);
      this.g = canvas.getContext("2d");
      this.setup();
      this.start();
      domObject.onmousemove = function(e) {
        _this.mouseX = e.x;
        return _this.mouseY = e.y;
      };
    }

    Sketch.prototype.isRunning = false;

    Sketch.prototype.start = function() {
      var render,
        _this = this;
      this.isRunning = true;
      render = function() {
        _this.draw();
        if (_this.isRunning) {
          return window.requestAnimationFrame(render);
        }
      };
      return window.requestAnimationFrame(render);
    };

    Sketch.prototype.stop = function() {
      return this.isRunning = false;
    };

    Sketch.prototype.toString = function() {
      return "Sketch";
    };

    /*
      Sketch API
    */


    Sketch.prototype.setup = function() {};

    Sketch.prototype.draw = function() {};

    /*
      2D Drawing API
    */


    isFillEnabled = true;

    isStrokeEnabled = false;

    computeStyle = function(args) {
      var grey;
      switch (args.length) {
        case 1:
          grey = args[0];
          return "rgba(" + grey + ", " + grey + ", " + grey + ", 1)";
        case 2:
          grey = args[0];
          return "rgba(" + grey + ", " + grey + ", " + grey + ", " + args[1] + ")";
        case 3:
          return "rgba(" + args[0] + ", " + args[1] + ", " + args[2] + ", 1)";
        case 4:
          return "rgba(" + args[0] + ", " + args[1] + ", " + args[2] + ", " + args[3] + ")";
        default:
          return "#FF0000";
      }
    };

    Sketch.prototype.background = function() {
      var style;
      this.g.clearRect(0, 0, this.width, this.height);
      style = this.g.fillStyle;
      this.g.fillStyle = computeStyle(arguments);
      this.g.fillRect(0, 0, this.width, this.height);
      return this.g.fillStyle = style;
    };

    Sketch.prototype.fill = function() {
      isFillEnabled = true;
      return this.g.fillStyle = computeStyle(arguments);
    };

    Sketch.prototype.stroke = function() {
      isStrokeEnabled = true;
      return this.g.strokeStyle = computeStyle(arguments);
    };

    Sketch.prototype.noFill = function() {
      return isFillEnabled = false;
    };

    Sketch.prototype.noStroke = function() {
      return isStrokeEnabled = false;
    };

    Sketch.prototype.rect = function(x, y, w, h) {
      if (isFillEnabled) {
        this.g.fillRect(x, y, w, h);
      }
      if (isStrokeEnabled) {
        return this.g.strokeRect(x, y, w, h);
      }
    };

    return Sketch;

  })();

  module.exports = {
    Sketch: Sketch
  };

}).call(this);

},{}],8:[function(require,module,exports){// Generated by CoffeeScript 1.6.1
(function() {
  var Behaviour, Constraint, Emitter, Particle, Physics, particleModule, util;

  util = require('../util');

  particleModule = require('./particle');

  Particle = particleModule.Particle;

  /*
  
    A Particle Physics Simulation
  */


  Physics = (function() {

    Physics.prototype.particles = [];

    Physics.prototype.behaviours = [];

    Physics.prototype.constraints = [];

    Physics.prototype.emitter = null;

    function Physics() {
      this.clear();
    }

    Physics.prototype.clear = function() {
      this.particles = [];
      this.behaviours = [];
      this.constraints = [];
      return this.emitter = new Emitter(this);
    };

    Physics.prototype.addParticle = function(particle) {
      return this.particles.push(particle);
    };

    Physics.prototype.add = function(effector, state) {
      var list;
      if (state == null) {
        state = particleModule.State.Alive;
      }
      list = effector instanceof Constraint ? this.constraints : this.behaviours;
      if (!list[state]) {
        list[state] = [];
      }
      return list[state].push(effector);
    };

    Physics.prototype.update = function() {
      var dead, i, particle, particles, stateDead, _i, _len;
      this.emitter.update();
      particles = this.particles;
      this.applyEffectors(this.behaviours, particles);
      this.applyEffectors(this.constraints, particles);
      dead = [];
      stateDead = particleModule.State.Dead;
      for (_i = 0, _len = particles.length; _i < _len; _i++) {
        particle = particles[_i];
        particle.update();
        if (particle.state === stateDead) {
          dead.push(particle);
        }
        void 0;
      }
      i = dead.length;
      while (i--) {
        particle = dead[i];
        util.removeElement(particle, particles);
        void 0;
      }
      return void 0;
    };

    Physics.prototype.applyEffectors = function(effectors, particles) {
      var effector, particle, state, stateEffectors, _i, _j, _len, _len1;
      state = effectors.length;
      while (state--) {
        stateEffectors = effectors[state];
        for (_i = 0, _len = stateEffectors.length; _i < _len; _i++) {
          effector = stateEffectors[_i];
          effector.prepare(this);
          for (_j = 0, _len1 = particles.length; _j < _len1; _j++) {
            particle = particles[_j];
            if (particle.state === state) {
              effector.apply(particle);
            }
            void 0;
          }
          void 0;
        }
        void 0;
      }
      return void 0;
    };

    Physics.prototype.size = function() {
      return this.particles.length;
    };

    return Physics;

  })();

  /*
  
    Particle Emitter
  */


  Emitter = (function() {
    var id, timer;

    Emitter.prototype.rate = 1;

    Emitter.prototype.interval = 1;

    Emitter.prototype.max = 100;

    Emitter.prototype.type = particleModule.Particle3;

    timer = -1;

    id = 0;

    function Emitter(physics) {
      this.physics = physics;
    }

    Emitter.prototype.update = function() {
      var i, p;
      if (timer === -1 || timer >= this.interval) {
        timer = 0;
        i = 0;
        while (i < this.rate && this.physics.size() < this.max) {
          p = this.create();
          this.init(p);
          i++;
        }
      }
      return timer++;
    };

    Emitter.prototype.create = function() {
      var p;
      p = new this.type(id++);
      this.physics.addParticle(p);
      return p;
    };

    Emitter.prototype.init = function(particle) {};

    return Emitter;

  })();

  /*
    Base class for all physical forces, behaviours & constraints
  */


  Behaviour = (function() {

    function Behaviour() {}

    Behaviour.prototype.prepare = function() {};

    Behaviour.prototype.apply = function(particle) {};

    return Behaviour;

  })();

  Constraint = (function() {

    function Constraint() {}

    Constraint.prototype.prepare = function() {};

    Constraint.prototype.apply = function(particle) {};

    return Constraint;

  })();

  module.exports = {
    Physics: Physics,
    Emitter: Emitter,
    Behaviour: Behaviour,
    Constraint: Constraint
  };

}).call(this);

},{"../util":2,"./particle":9}],9:[function(require,module,exports){// Generated by CoffeeScript 1.6.1
(function() {
  var Particle, Particle2, Particle3, State, Vec2, Vec3, vector,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  vector = require('../math/vector');

  Vec2 = vector.Vec2;

  Vec3 = vector.Vec3;

  State = {
    Alive: 0,
    Locked: 1,
    Idle: 2,
    Dead: 3
  };

  /*
  
    VerLer Particle Baseclass
  
    FIELD flavoured particle integrator.
    Supports Verlet-style integration for 'strict' relationships e.g. Springs + Constraints
    and also Euler-style continous force integration for smooth/ flowing behaviour e.g. Flocking
  */


  Particle = (function() {

    Particle.prototype.id = 0;

    Particle.prototype.state = State.Alive;

    Particle.prototype.age = 0;

    Particle.prototype.position = null;

    Particle.prototype.drag = 0.03;

    Particle.prototype.prev = null;

    Particle.prototype.force = null;

    Particle.prototype.velocity = null;

    function Particle(id) {
      this.id = id;
    }

    Particle.prototype.clearVelocity = function() {
      return this.prev.set(this.position);
    };

    Particle.prototype.scaleVelocity = function(amount) {
      return this.prev.lerp(this.position, 1.0 - amount);
    };

    Particle.prototype.setPosition = function(v) {
      this.position.set(v);
      return this.prev.set(v);
    };

    Particle.prototype.lock = function() {
      return this.state = State.Locked;
    };

    Particle.prototype.unlock = function() {
      return this.state = State.Alive;
    };

    Particle.prototype.die = function() {
      return this.state = State.Dead;
    };

    Particle.prototype.idle = function() {
      return this.state = State.Idle;
    };

    Particle.prototype.toString = function() {
      return "Particle(" + this.position + ")";
    };

    return Particle;

  })();

  /*
  
    3D VerLer Particle
  */


  Particle3 = (function(_super) {
    var tmp;

    __extends(Particle3, _super);

    tmp = new Vec3();

    function Particle3(id) {
      this.id = id;
      this.position = new Vec3();
      this.prev = new Vec3();
      this.force = new Vec3();
      this.velocity = new Vec3();
    }

    Particle3.prototype.update = function() {
      this.age++;
      if (this.state > State.Alive) {
        return;
      }
      tmp.set(this.position);
      this.position.x += (this.position.x - this.prev.x) + this.force.x;
      this.position.y += (this.position.y - this.prev.y) + this.force.y;
      this.position.z += (this.position.z - this.prev.z) + this.force.z;
      this.prev.set(tmp);
      this.prev.lerp(this.position, this.drag);
      return this.force.zero();
    };

    Particle3.prototype.setPosition3 = function(x, y, z) {
      this.position.set3(x, y, z);
      return this.prev.set3(x, y, z);
    };

    return Particle3;

  })(Particle);

  /*
  
    2D VerLer Particle
  */


  Particle2 = (function(_super) {
    var tmp;

    __extends(Particle2, _super);

    tmp = new Vec2();

    function Particle2(id) {
      this.id = id;
      this.position = new Vec2();
      this.prev = new Vec2();
      this.force = new Vec2();
      this.velocity = new Vec2();
    }

    Particle2.prototype.update = function() {
      this.age++;
      if (this.state > State.Alive) {
        return;
      }
      tmp.set(this.position);
      this.position.x += (this.position.x - this.prev.x) + this.force.x;
      this.position.y += (this.position.y - this.prev.y) + this.force.y;
      this.prev.set(tmp);
      this.prev.lerp(this.position, this.drag);
      return this.force.zero();
    };

    Particle2.prototype.setPosition2 = function(x, y) {
      this.position.set2(x, y);
      return this.prev.set2(x, y);
    };

    return Particle2;

  })(Particle);

  module.exports = {
    Particle: Particle,
    Particle2: Particle2,
    Particle3: Particle3,
    State: State
  };

}).call(this);

},{"../math/vector":7}],10:[function(require,module,exports){// Generated by CoffeeScript 1.6.1
(function() {
  var Attractor, Behaviour, Force, Vec2, Vec3, physics, vector,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  vector = require('../math/vector');

  Vec2 = vector.Vec2;

  Vec3 = vector.Vec3;

  physics = require('./physics');

  Behaviour = physics.Behaviour;

  /*
  
    A constant force along a vector e.g. Gravity.
    Works in 2D + 3D.
  */


  Force = (function(_super) {
    var force;

    __extends(Force, _super);

    force = null;

    function Force(direction, weight) {
      this.direction = direction;
      this.weight = weight != null ? weight : 1;
    }

    Force.prototype.prepare = function() {
      return force = this.direction.normalizeTo(this.weight);
    };

    Force.prototype.apply = function(particle) {
      return particle.position.add(force);
    };

    Force.prototype.toString = function() {
      return "Force(" + force + ")";
    };

    return Force;

  })(Behaviour);

  /*
  
    Attracts each particle within range to a target point.
    Works in 2D + 3D.
  */


  Attractor = (function() {
    var rangeSq, tmp;

    tmp = null;

    rangeSq = 0;

    function Attractor(target, range, weight) {
      this.target = target;
      this.range = range;
      this.weight = weight != null ? weight : 1;
      tmp = this.target.clone();
    }

    Attractor.prototype.prepare = function() {
      return rangeSq = this.range * this.range;
    };

    Attractor.prototype.apply = function(particle) {
      var dist, distSq;
      tmp.set(this.target).sub(particle.position);
      distSq = tmp.lengthSquared();
      if (distSq > 0 && distSq < rangeSq) {
        dist = Math.sqrt(distSq);
        tmp.scale((1 / dist) * (1 - dist / this.range) * this.weight);
        return particle.force.add(tmp);
      }
    };

    Attractor.prototype.toString = function() {
      return "Attractor(" + this.target + ", " + this.range + ", " + this.weight + ")";
    };

    return Attractor;

  })();

  module.exports = {
    Force: Force,
    Attractor: Attractor
  };

}).call(this);

},{"../math/vector":7,"./physics":8}],11:[function(require,module,exports){// Generated by CoffeeScript 1.6.1
(function() {
  var Area, Box, Constraint, Vec2, Vec3, Wrap2, Wrap3, physics, vector,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  vector = require('../math/vector');

  Vec2 = vector.Vec2;

  Vec3 = vector.Vec3;

  physics = require('./physics');

  Constraint = physics.Constraint;

  /*
    Keeps the particle inside the given 3D box
  */


  Box = (function(_super) {

    __extends(Box, _super);

    function Box(min, max) {
      this.min = min != null ? min : new Vec3();
      this.max = max != null ? max : new Vec3(100, 100, 100);
    }

    Box.prototype.apply = function(particle) {
      var pos;
      pos = particle.position;
      if (pos.x < this.min.x) {
        pos.x = this.min.x;
      }
      if (pos.y < this.min.y) {
        pos.y = this.min.y;
      }
      if (pos.z < this.min.z) {
        pos.z = this.min.z;
      }
      if (pos.x > this.max.x) {
        pos.x = this.max.x;
      }
      if (pos.y > this.max.y) {
        pos.y = this.max.y;
      }
      if (pos.z > this.max.z) {
        return pos.z = this.max.z;
      }
    };

    Box.prototype.toString = function() {
      return "Box(" + this.min + ", " + this.max + ")";
    };

    return Box;

  })(Constraint);

  /*
    2D version of Box.
  */


  Area = (function(_super) {

    __extends(Area, _super);

    function Area(min, max) {
      this.min = min != null ? min : new Vec2();
      this.max = max != null ? max : new Vec2(100, 100);
    }

    Area.prototype.apply = function(particle) {
      var pos;
      pos = particle.position;
      if (pos.x < this.min.x) {
        pos.x = this.min.x;
      }
      if (pos.y < this.min.y) {
        pos.y = this.min.y;
      }
      if (pos.x > this.max.x) {
        pos.x = this.max.x;
      }
      if (pos.y > this.max.y) {
        return pos.y = this.max.y;
      }
    };

    Area.prototype.toString = function() {
      return "Area(" + this.min + ", " + this.max + ")";
    };

    return Area;

  })(Constraint);

  /*
    Keeps a particle within a certain 2D region by wrapping it around a given area.
  */


  Wrap2 = (function(_super) {
    var delta;

    __extends(Wrap2, _super);

    delta = new Vec2();

    function Wrap2(min, max) {
      this.min = min != null ? min : new Vec2();
      this.max = max != null ? max : new Vec2(100, 100);
    }

    Wrap2.prototype.prepare = function() {
      return delta.set(this.max).sub(this.min);
    };

    Wrap2.prototype.apply = function(particle) {
      var pos, prev;
      pos = particle.position;
      prev = particle.prev;
      if (pos.x < this.min.x) {
        pos.x += delta.x;
        prev.x += delta.x;
      }
      if (pos.y < this.min.y) {
        pos.y += delta.y;
        prev.y += delta.y;
      }
      if (pos.x > this.max.x) {
        pos.x -= delta.x;
        prev.x -= delta.x;
      }
      if (pos.y > this.max.y) {
        pos.y -= delta.y;
        return prev.y -= delta.y;
      }
    };

    Wrap2.prototype.toString = function() {
      return "Wrap2(" + this.min + ", " + this.max + ")";
    };

    return Wrap2;

  })(Constraint);

  /*
    Keeps a particle within a certain 2D region by wrapping it around a given area.
  */


  Wrap3 = (function(_super) {
    var delta;

    __extends(Wrap3, _super);

    delta = new Vec3();

    function Wrap3(min, max) {
      this.min = min != null ? min : new Vec3();
      this.max = max != null ? max : new Vec3(100, 100, 100);
    }

    Wrap3.prototype.prepare = function() {
      return delta.set(this.max).sub(this.min);
    };

    Wrap3.prototype.apply = function(particle) {
      var pos, prev;
      pos = particle.position;
      prev = particle.prev;
      if (pos.x < this.min.x) {
        pos.x += delta.x;
        prev.x += delta.x;
      }
      if (pos.y < this.min.y) {
        pos.y += delta.y;
        prev.y += delta.y;
      }
      if (pos.z < this.min.z) {
        pos.z += delta.z;
        prev.z += delta.z;
      }
      if (pos.x > this.max.x) {
        pos.x -= delta.x;
        prev.x -= delta.x;
      }
      if (pos.y > this.max.y) {
        pos.y -= delta.y;
        prev.y -= delta.y;
      }
      if (pos.z > this.max.z) {
        pos.z -= delta.z;
        return prev.z -= delta.z;
      }
    };

    Wrap3.prototype.toString = function() {
      return "Wrap3(" + this.min + ", " + this.max + ")";
    };

    return Wrap3;

  })(Constraint);

  module.exports = {
    Box: Box,
    Area: Area,
    Wrap2: Wrap2,
    Wrap3: Wrap3
  };

}).call(this);

},{"../math/vector":7,"./physics":8}],6:[function(require,module,exports){// Generated by CoffeeScript 1.6.1

/*

 Random based on Jon Watte's mersenne twister package.
 Adds several utility methods under a unified interface, that'll allow to use
 different number generators at some point.
*/


(function() {
  var Random, mersenne;

  mersenne = require('mersenne');

  Random = (function() {

    function Random(initialSeed) {
      if (initialSeed == null) {
        initialSeed = 0;
      }
      this.seed(initialSeed);
    }

    Random.prototype.seed = function(value) {
      this.seedValue = value;
      return mersenne.seed(this.seedValue);
    };

    Random.prototype.toString = function() {
      return "Random(" + this.seedValue + ")";
    };

    Random.prototype.next = function() {
      var k;
      k = 1000000;
      return mersenne.rand(k) / k;
    };

    Random.prototype.int = function(min, max) {
      return Math.floor(this.next() * (max - min) + min);
    };

    Random.prototype.bool = function(chance) {
      if (chance == null) {
        chance = 0.5;
      }
      return this.next() < chance;
    };

    Random.prototype.shuffle = function(list) {
      return list.sort(function() {
        return 0.5 - this.next();
      });
    };

    Random.prototype.pick = function(list, count) {
      var i, indices, result, _i, _j, _ref;
      if (count == null) {
        count = 1;
      }
      switch (list.length) {
        case 0:
          return null;
        case 1:
          return list[0];
        default:
          if (count === 1) {
            return list[this.int(0, list.length)];
          } else {
            indices = [];
            for (i = _i = 0, _ref = list.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              indices.push(i);
            }
            exports.shuffle(indices);
            result = [];
            for (i = _j = 0; 0 <= count ? _j < count : _j > count; i = 0 <= count ? ++_j : --_j) {
              result.push(list[indices[i]]);
            }
            return result;
          }
      }
    };

    Random.prototype.pickAB = function(listA, listB, chance) {
      var list;
      list = this.next() < chance ? listA : listB;
      return this.pick(list);
    };

    return Random;

  })();

  module.exports = {
    Random: Random
  };

}).call(this);

},{"mersenne":13}],13:[function(require,module,exports){// this program is a JavaScript version of Mersenne Twister, with concealment and encapsulation in class,
// an almost straight conversion from the original program, mt19937ar.c,
// translated by y. okada on July 17, 2006.
// and modified a little at july 20, 2006, but there are not any substantial differences.
// in this program, procedure descriptions and comments of original source code were not removed.
// lines commented with //c// were originally descriptions of c procedure. and a few following lines are appropriate JavaScript descriptions.
// lines commented with /* and */ are original comments.
// lines commented with // are additional comments in this JavaScript version.
// before using this version, create at least one instance of MersenneTwister19937 class, and initialize the each state, given below in c comments, of all the instances.
/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_genrand(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

function MersenneTwister19937()
{
	/* constants should be scoped inside the class */
	var N, M, MATRIX_A, UPPER_MASK, LOWER_MASK;
	/* Period parameters */
	//c//#define N 624
	//c//#define M 397
	//c//#define MATRIX_A 0x9908b0dfUL   /* constant vector a */
	//c//#define UPPER_MASK 0x80000000UL /* most significant w-r bits */
	//c//#define LOWER_MASK 0x7fffffffUL /* least significant r bits */
	N = 624;
	M = 397;
	MATRIX_A = 0x9908b0df;   /* constant vector a */
	UPPER_MASK = 0x80000000; /* most significant w-r bits */
	LOWER_MASK = 0x7fffffff; /* least significant r bits */
	//c//static unsigned long mt[N]; /* the array for the state vector  */
	//c//static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
	var mt = new Array(N);   /* the array for the state vector  */
	var mti = N+1;           /* mti==N+1 means mt[N] is not initialized */

	function unsigned32 (n1) // returns a 32-bits unsiged integer from an operand to which applied a bit operator.
	{
		return n1 < 0 ? (n1 ^ UPPER_MASK) + UPPER_MASK : n1;
	}

	function subtraction32 (n1, n2) // emulates lowerflow of a c 32-bits unsiged integer variable, instead of the operator -. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		return n1 < n2 ? unsigned32((0x100000000 - (n2 - n1)) & 0xffffffff) : n1 - n2;
	}

	function addition32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator +. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		return unsigned32((n1 + n2) & 0xffffffff)
	}

	function multiplication32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator *. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		var sum = 0;
		for (var i = 0; i < 32; ++i){
			if ((n1 >>> i) & 0x1){
				sum = addition32(sum, unsigned32(n2 << i));
			}
		}
		return sum;
	}

	/* initializes mt[N] with a seed */
	//c//void init_genrand(unsigned long s)
	this.init_genrand = function (s)
	{
		//c//mt[0]= s & 0xffffffff;
		mt[0]= unsigned32(s & 0xffffffff);
		for (mti=1; mti<N; mti++) {
			mt[mti] = 
			//c//(1812433253 * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti);
			addition32(multiplication32(1812433253, unsigned32(mt[mti-1] ^ (mt[mti-1] >>> 30))), mti);
			/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
			/* In the previous versions, MSBs of the seed affect   */
			/* only MSBs of the array mt[].                        */
			/* 2002/01/09 modified by Makoto Matsumoto             */
			//c//mt[mti] &= 0xffffffff;
			mt[mti] = unsigned32(mt[mti] & 0xffffffff);
			/* for >32 bit machines */
		}
	}

	/* initialize by an array with array-length */
	/* init_key is the array for initializing keys */
	/* key_length is its length */
	/* slight change for C++, 2004/2/26 */
	//c//void init_by_array(unsigned long init_key[], int key_length)
	this.init_by_array = function (init_key, key_length)
	{
		//c//int i, j, k;
		var i, j, k;
		//c//init_genrand(19650218);
		this.init_genrand(19650218);
		i=1; j=0;
		k = (N>key_length ? N : key_length);
		for (; k; k--) {
			//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525))
			//c//	+ init_key[j] + j; /* non linear */
			mt[i] = addition32(addition32(unsigned32(mt[i] ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1664525)), init_key[j]), j);
			mt[i] = 
			//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
			unsigned32(mt[i] & 0xffffffff);
			i++; j++;
			if (i>=N) { mt[0] = mt[N-1]; i=1; }
			if (j>=key_length) j=0;
		}
		for (k=N-1; k; k--) {
			//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941))
			//c//- i; /* non linear */
			mt[i] = subtraction32(unsigned32((dbg=mt[i]) ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1566083941)), i);
			//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
			mt[i] = unsigned32(mt[i] & 0xffffffff);
			i++;
			if (i>=N) { mt[0] = mt[N-1]; i=1; }
		}
		mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
	}

    /* moved outside of genrand_int32() by jwatte 2010-11-17; generate less garbage */
    var mag01 = [0x0, MATRIX_A];

	/* generates a random number on [0,0xffffffff]-interval */
	//c//unsigned long genrand_int32(void)
	this.genrand_int32 = function ()
	{
		//c//unsigned long y;
		//c//static unsigned long mag01[2]={0x0UL, MATRIX_A};
		var y;
		/* mag01[x] = x * MATRIX_A  for x=0,1 */

		if (mti >= N) { /* generate N words at one time */
			//c//int kk;
			var kk;

			if (mti == N+1)   /* if init_genrand() has not been called, */
				//c//init_genrand(5489); /* a default initial seed is used */
				this.init_genrand(5489); /* a default initial seed is used */

			for (kk=0;kk<N-M;kk++) {
				//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
				//c//mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
				y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
				mt[kk] = unsigned32(mt[kk+M] ^ (y >>> 1) ^ mag01[y & 0x1]);
			}
			for (;kk<N-1;kk++) {
				//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
				//c//mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
				y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
				mt[kk] = unsigned32(mt[kk+(M-N)] ^ (y >>> 1) ^ mag01[y & 0x1]);
			}
			//c//y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
			//c//mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
			y = unsigned32((mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK));
			mt[N-1] = unsigned32(mt[M-1] ^ (y >>> 1) ^ mag01[y & 0x1]);
			mti = 0;
		}

		y = mt[mti++];

		/* Tempering */
		//c//y ^= (y >> 11);
		//c//y ^= (y << 7) & 0x9d2c5680;
		//c//y ^= (y << 15) & 0xefc60000;
		//c//y ^= (y >> 18);
		y = unsigned32(y ^ (y >>> 11));
		y = unsigned32(y ^ ((y << 7) & 0x9d2c5680));
		y = unsigned32(y ^ ((y << 15) & 0xefc60000));
		y = unsigned32(y ^ (y >>> 18));

		return y;
	}

	/* generates a random number on [0,0x7fffffff]-interval */
	//c//long genrand_int31(void)
	this.genrand_int31 = function ()
	{
		//c//return (genrand_int32()>>1);
		return (this.genrand_int32()>>>1);
	}

	/* generates a random number on [0,1]-real-interval */
	//c//double genrand_real1(void)
	this.genrand_real1 = function ()
	{
		//c//return genrand_int32()*(1.0/4294967295.0);
		return this.genrand_int32()*(1.0/4294967295.0);
		/* divided by 2^32-1 */
	}

	/* generates a random number on [0,1)-real-interval */
	//c//double genrand_real2(void)
	this.genrand_real2 = function ()
	{
		//c//return genrand_int32()*(1.0/4294967296.0);
		return this.genrand_int32()*(1.0/4294967296.0);
		/* divided by 2^32 */
	}

	/* generates a random number on (0,1)-real-interval */
	//c//double genrand_real3(void)
	this.genrand_real3 = function ()
	{
		//c//return ((genrand_int32()) + 0.5)*(1.0/4294967296.0);
		return ((this.genrand_int32()) + 0.5)*(1.0/4294967296.0);
		/* divided by 2^32 */
	}

	/* generates a random number on [0,1) with 53-bit resolution*/
	//c//double genrand_res53(void)
	this.genrand_res53 = function ()
	{
		//c//unsigned long a=genrand_int32()>>5, b=genrand_int32()>>6;
		var a=this.genrand_int32()>>>5, b=this.genrand_int32()>>>6;
		return(a*67108864.0+b)*(1.0/9007199254740992.0);
	}
	/* These real versions are due to Isaku Wada, 2002/01/09 added */
}

//  Exports: Public API

//  Export the twister class
exports.MersenneTwister19937 = MersenneTwister19937;

//  Export a simplified function to generate random numbers
var gen = new MersenneTwister19937;
gen.init_genrand((new Date).getTime() % 1000000000);
exports.rand = function(N) {
    if (!N)
        {
        N = 32768;
        }
    return Math.floor(gen.genrand_real2() * N);
}
exports.seed = function(S) {
    if (typeof(S) != 'number')
        {
        throw new Error("seed(S) must take numeric argument; is " + typeof(S));
        }
    gen.init_genrand(S);
}
exports.seed_array = function(A) {
    if (typeof(A) != 'object')
        {
        throw new Error("seed_array(A) must take array of numbers; is " + typeof(A));
        }
    gen.init_by_array(A);
}



},{}]},{},[1]);